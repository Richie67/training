#!/bin/bash
#
# Copyright 2020 Red Hat, Inc.
#
# NAME
#     lab-secure-mesh
#
# SYNOPSIS
#     lab-deploy {start|finish|grade}
#
#        start - Deploy the exchange and dashboard applications into OpenShift Service Mesh
#        finish - Remove application projects from OpenShift Service Mesh
#
# DESCRIPTION
#     This script is used to start or conclude the chapter 8 section 6 guided exercise.
#
# CHANGELOG
#   * Wed Apr 22 2020 Marek Czernek <mczernek@redhat.com>
#   - Initial commit
#
# REFERENCES
#     Applications
#         https://github.com/RedHatTraining/DO328-apps/tree/master/exchange-application
#         https://github.com/RedHatTraining/DO328-apps/tree/master/dashboard


PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin

# Initialize and set some variables
run_as_root='true'

# Required by the do328 shlib
this='secure-mesh'
title='Lab: Securing an OpenShift Service Mesh'

istio_project='istio-system'
istio_route='istio-ingressgateway'

declare -a valid_commands=(start finish grade)

function lab_start {

  ISTIO_INGRESS_GW=''

  ocp4_print_prereq_header
  ocp4_is_cluster_up
  ocp4_is_sm_installed
  ocp4_grab_lab_files
  ocp4_login_as_developer
  ocp4_get_route_host_into ISTIO_INGRESS_GW "${istio_project}" "${istio_route}"

  ocp4_print_setup_header
  ocp4_new_project "${this}"
  ocp4_new_project "dashboard"
  ocp4_sm_add_projects_to_smmr "${this}, dashboard"
  ocp4_print_smmr_state_for_project "${this}"
  ocp4_print_smmr_state_for_project "dashboard"
  ocp4_wait_operator_ready "${this}"
  ocp4_wait_operator_ready "dashboard"

  ocp4_process_template_solution "${this}" "exchange-template.yaml" "INGRESS_GW=${ISTIO_INGRESS_GW}"
  ocp4_process_template_solution "dashboard" "dashboard-template.yaml" "INGRESS_GW=${ISTIO_INGRESS_GW}" "TARGET_PROJECT=${this}"

  ocp4_check_exchange_app_pod_replicas "${this}"

  ocp4_print_setup_footer

}

function lab_finish {

  ocp4_print_cleanup_header

  ocp4_cleanup_lab_files
  ocp4_login_as_admin
  ocp4_sm_clean_smmr
  ocp4_delete_project "${this}"
  ocp4_delete_project 'dashboard'
  oc patch smcp basic-install -n istio-system --type merge -p '{"spec":{"istio":{"global":{"mtls":{"enabled": false}}}}}'
  ocp4_logout

  ocp4_print_cleanup_footer
}

function lab_grade {
  ocp4_print_grade_header

  ocp4_login_as_admin

  print_line
  print_line ' Verifying LAB solution:'

  ISTIO_INGRESS_GW=''
  ocp4_get_route_host_into ISTIO_INGRESS_GW "${istio_project}" "${istio_route}"

  check_dashboard_endpoint "${ISTIO_INGRESS_GW}" "backend/history"
  check_dashboard_endpoint "${ISTIO_INGRESS_GW}" "backend/currencies"
  check_dashboard_endpoint "${ISTIO_INGRESS_GW}" "backend/exchangeGW"
  check_dashboard_endpoint "${ISTIO_INGRESS_GW}" "backend/frontend"
  check_live_frontend "${ISTIO_INGRESS_GW}"

  print_line
  ocp4_logout

  ocp4_print_grade_footer
}

function check_dashboard_endpoint {
  local ingress_gw="$1"
  local endpoint="$2"
  local result="false"

  ocp4_pad "Checking ${endpoint} is not available"
  state="$(curl -s ${ingress_gw}/${endpoint} | jq -r '.isAvailable')"
  if [[ "${state}" == "${result}" ]]; then
    print_PASS
  else
    print_FAIL
  fi
}

function check_live_frontend {
  local frontend_url="$1/frontend"

  ocp4_pad "Checking frontend is available"
  if curl -s ${frontend_url} | grep "DO328"; then
    print_PASS
  else
    print_FAIL
  fi
}

############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
